//  –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ 
const toggleButton = document.querySelector('#toggleButton');
const targetText = document.querySelector('#targetText');
const keyboardArea = document.querySelector('#keyboardArea');
const eventOutput = document.querySelector('#eventOutput');

//  1.1 –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á–∞ –∫–ª—ñ–∫—É 
const changeStyle = (event) => {
    const now = new Date().toLocaleTimeString();
    console.log(`–ö–Ω–æ–ø–∫—É –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ: ${now}`);
    event.currentTarget.classList.toggle('highlight'); // 1.2
};
toggleButton.addEventListener('click', changeStyle);

//  1.3 –î–∏–Ω–∞–º—ñ—á–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è 
const handleMouseOver = () => {
    targetText.style.color = 'blue';
    console.log("–ö—É—Ä—Å–æ—Ä –Ω–∞–≤–µ–¥–µ–Ω–æ. –ö–æ–ª—ñ—Ä –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Å–∏–Ω—ñ–π.");
    targetText.removeEventListener('mouseover', handleMouseOver); // 1.4
};
targetText.addEventListener('mouseover', handleMouseOver);

//  1.5 –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–ª—ñ–∫—É 
document.addEventListener('click', (event) => {
    console.log(`–ö–ª—ñ–∫ —É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö: X=${event.clientX}, Y=${event.clientY}`);
});

//  1.6 –¢–∏–º—á–∞—Å–æ–≤–∞ –∑–º—ñ–Ω–∞ —Å—Ç–∏–ª—é –ø—ñ—Å–ª—è –∫–ª—ñ–∫—É 
const changeTempStyle = (event) => {
    event.currentTarget.style.backgroundColor = 'green';
    setTimeout(() => event.currentTarget.style.backgroundColor = '', 2000);
};
toggleButton.addEventListener('click', changeTempStyle);

//  1.7 –û–±—Ä–æ–±–∫–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ 
document.addEventListener('keydown', (event) => {
    if (event.key === 'Enter') targetText.textContent = "–í–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ Enter!";
    if (event.key === 'Escape') targetText.textContent = "";
    eventOutput.textContent = `–í–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –∫–ª–∞–≤—ñ—à—É: ${event.key}`;
});

//  1.8 –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –Ω–∞–≤–µ–¥–µ–Ω–Ω—è 
const activateHover = document.createElement('button');
activateHover.id = 'activateHover';
activateHover.textContent = '–£–≤—ñ–º–∫–Ω—É—Ç–∏ / –í–∏–º–∫–Ω—É—Ç–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è';
document.body.appendChild(activateHover);

let hoverActive = false;
const hoverHandler = () => targetText.style.color = 'orange';

activateHover.addEventListener('click', () => {
    if (!hoverActive) {
        targetText.addEventListener('mouseover', hoverHandler);
        console.log("–†–µ–∞–∫—Ü—ñ—è –Ω–∞–≤–µ–¥–µ–Ω–Ω—è –£–í–Ü–ú–ö–ù–ï–ù–ê");
    } else {
        targetText.removeEventListener('mouseover', hoverHandler);
        console.log("–†–µ–∞–∫—Ü—ñ—è –Ω–∞–≤–µ–¥–µ–Ω–Ω—è –í–ò–ú–ö–ù–ï–ù–ê");
    }
    hoverActive = !hoverActive;
});

//  –î–æ–¥–∞—Ç–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è (—á–µ—Ä–≤–æ–Ω–∏–π —Ç–µ–∫—Å—Ç) 
const toggleMouseListenerBtn = document.createElement('button');
toggleMouseListenerBtn.textContent = '–£–≤—ñ–º–∫–Ω—É—Ç–∏/–í–∏–º–∫–Ω—É—Ç–∏ —á–µ—Ä–≤–æ–Ω–∏–π —Ç–µ–∫—Å—Ç';
document.body.appendChild(toggleMouseListenerBtn);

const redColorHandler = () => targetText.style.color = 'red';
let redActive = false;

toggleMouseListenerBtn.addEventListener('click', () => {
    if (!redActive) {
        targetText.addEventListener('click', redColorHandler);
        console.log("–°–ª—É—Ö–∞—á —á–µ—Ä–≤–æ–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É –¥–æ–¥–∞–Ω–æ");
    } else {
        targetText.removeEventListener('click', redColorHandler);
        console.log("–°–ª—É—Ö–∞—á —á–µ—Ä–≤–æ–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É –∑–Ω—è—Ç–æ");
    }
    redActive = !redActive;
});

//  –ó–∞–≤–¥–∞–Ω–Ω—è 2: –ì–ª–æ–±–∞–ª—å–Ω—ñ –ø–æ–¥—ñ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ 
let keyCount = 0;
let keyHistory = [];
let capsLockOn = false;
let secretKeys = ['a', 's', 'd', 'f'];
let currentIndex = 0;

document.addEventListener("keydown", event => {
    const key = event.key.toLowerCase();

    //  2.1‚Äì2.2 
    eventOutput.innerHTML = `
        Key: <strong>${event.key}</strong><br>
        Code: <strong>${event.code}</strong>
    `;

    //  2.3‚Äì2.4 –ü—Ä–æ–±—ñ–ª 
    if (event.code === 'Space') {
        keyboardArea.style.backgroundColor = '#ffebcd';
        event.preventDefault();
    }

    //  2.5 –õ—ñ—á–∏–ª—å–Ω–∏–∫ 
    keyCount++;
    eventOutput.innerHTML += `<p>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞—Ç–∏—Å–∫–∞–Ω—å: ${keyCount}</p>`;

    // 2.6 –Ü—Å—Ç–æ—Ä—ñ—è 
    keyHistory.push(event.key);
    if (keyHistory.length > 10) keyHistory.shift();
    eventOutput.innerHTML += `<p>–Ü—Å—Ç–æ—Ä—ñ—è: ${keyHistory.join(', ')}</p>`;

    //  2.7 –ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É 
    if (key === 'r') keyboardArea.style.backgroundColor = 'red';
    if (key === 'g') keyboardArea.style.backgroundColor = 'green';
    if (key === 'b') keyboardArea.style.backgroundColor = 'blue';

    //  2.8 –ó–º—ñ–Ω–∞ —Ä–æ–∑–º—ñ—Ä—É —Ç–µ–∫—Å—Ç—É 
    const textElement = keyboardArea.querySelector('p');
    if (textElement) {
        let size = parseFloat(window.getComputedStyle(textElement).fontSize);
        if (key === '+') textElement.style.fontSize = `${size + 2}px`;
        if (key === '-') textElement.style.fontSize = `${Math.max(10, size - 2)}px`;
    }

    //  2.9 CapsLock 
    const capsState = event.getModifierState && event.getModifierState('CapsLock');
    if (capsState !== capsLockOn) {
        capsLockOn = capsState;
        keyboardArea.innerHTML = capsLockOn ? "<p>CapsLock —É–≤—ñ–º–∫–Ω–µ–Ω–æ</p>" : "<p>CapsLock –≤–∏–º–∫–Ω–µ–Ω–æ</p>";
    }

    //  2.10 –ú—ñ–Ω—ñ-–≥—Ä–∞ 
    if (key === secretKeys[currentIndex]) {
        currentIndex++;
        keyboardArea.innerHTML = `<p>–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ${currentIndex}/${secretKeys.length}</p>`;
        if (currentIndex === secretKeys.length) {
            keyboardArea.innerHTML = "<p>üéâ –í–∏ –≤–∏–≥—Ä–∞–ª–∏ –º—ñ–Ω—ñ-–≥—Ä—É!</p>";
            currentIndex = 0;
        }
    } else if (secretKeys.includes(key)) {
        currentIndex = 0;
        keyboardArea.innerHTML = "<p>‚ùå –ü–æ–º–∏–ª–∫–∞! –ü–æ—á–Ω–∏ —Å–ø–æ—á–∞—Ç–∫—É.</p>";
    }
});

document.addEventListener("keyup", event => {
    if (event.code === 'Space') keyboardArea.style.backgroundColor = 'transparent';
});

//  –ó–∞–≤–¥–∞–Ω–Ω—è 3: –ü–æ–¥—ñ—ó —Ñ–æ—Ä–º 
const loginForm = document.querySelector('#loginForm');
const usernameInput = document.querySelector('#username');
const emailInput = document.querySelector('#email');

//  3.1 + 3.5 
loginForm.addEventListener("submit", event => {
    event.preventDefault();

    if (usernameInput.classList.contains('error')) {
        console.warn("‚ùå –§–æ—Ä–º–∞ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –ø—Ä–æ–π—à–ª–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é.");
        return;
    }

    const formData = {
        login: loginForm.elements.login.value,
        email: loginForm.elements.email.value
    };

    console.log("‚úÖ –î–∞–Ω—ñ —Ñ–æ—Ä–º–∏:", formData);
    loginForm.insertAdjacentHTML("afterend", `<p class="success">‚úÖ –£—Å–ø—ñ—à–Ω–æ! –î–∞–Ω—ñ —Ñ–æ—Ä–º–∏ –≤–∏–≤–µ–¥–µ–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª—å.</p>`);
});

//  3.2 –í–∞–ª—ñ–¥–∞—Ü—ñ—è live 
usernameInput.addEventListener('input', e => {
    const value = e.target.value;
    if (value.length < 4) {
        usernameInput.classList.add('error');
        usernameInput.style.border = '2px solid red';
    } else {
        usernameInput.classList.remove('error');
        usernameInput.style.border = '1px solid #007bff';
    }
});

//  3.3 –í–∞–ª—ñ–¥–∞—Ü—ñ—è blur 
usernameInput.addEventListener('blur', e => {
    if (e.target.value.trim() === '') {
        console.warn("‚ö†Ô∏è –ü–æ–ª–µ '–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.");
        usernameInput.focus();
    }
});

//  3.4 Email 
emailInput.addEventListener('change', e => {
    console.log(`üìß Email –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${e.target.value}`);
});
